<resources>
    <string name="app_name">WhaleTheDvaa</string>
    <string name="title_activity_vulnerability_selection">Vulnerability Selection</string>
    <string name="title_activity_vuln_selection">Vulnerability Selection</string>
    <string name="flag">Enter Flag</string>
    <string name="enter">Enter</string>
    <string name="cancel">Cancel</string>
    <string name="title_activity_tfa_killer">tfaKiller</string>
    <string name="exit">Exit</string>
    <string name="viewSocial">Victim\'s Social account</string>
    <string name="AboutTheWhale">White Hat Application for Learning and Evaluation, or WHALE, is a tool to help you
        learn about how common Android app vulnerabilities can be exploited and mitigated. This app aims to help you
        understand how you can develop secure Android applications by avoiding common design flaws or protecting against
        common attacks, as well as improve your skills as a penetration tester conducting an evaluation of an app’s
        security.
    </string>
    <string name="flags">The progress page is where you can enter the flags you have found from the vulnerabilities. You
        can find this page through the main vulnerability selector, or the difficulty selector for each vulnerability.
        Press ‘Enter Flag’ to add the flag you have found. You can view your progress in the progress bars which display
        how many of the vulnerabilities you have completed overall, as well as broken down by difficulty level.
    </string>
    <string name="l33tSpeak">When you have successfully exploited a vulnerability, you will find a flag – a piece of
        text in leet speak, or “L33T SP34K”, such as 4PPL3S or B4N4N4S. Once you have this flag, enter it in the
        progress page to update your progress.
    </string>
    <string name="mitigation">On the difficulty selector page, you can view how your chosen vulnerability is caused and
        commonly mitigated. This explains which flaws allow an attacker to exploit the application, and how they can be
        fixed to prevent these kind of attacks.
    </string>
    <string name="vulnerabilties">When you select ‘Get Splashing’, you will be directed to the vulnerability selection
        page. Here you will see the range of common Android vulnerabilities WHALE offers for you to try and exploit,
        each with varying levels of difficulty – easy, medium, and ‘killer’.
    </string>
    <string name="hints">Each vulnerability comes with three hints that can be viewed by selecting the ‘Hints’ button in
        the top right. The three hints will progressively give away more clues as to how you can exploit the
        vulnerability and get the flag.
    </string>
    <string name="information">At the top right of each page is the information button which gives information about the
        vulnerability. This will give you your scenario as a hacker trying to exploit the app, including any of the
        details about your victim you may need, such as their email address. This will appear when you open the
        vulnerability, as well as any time you click this button.
    </string>
    <string name="progress">The progress page is where you can enter the flags you have found from the vulnerabilities.
        You can find this page through the main vulnerability selector, or the difficulty selector for each
        vulnerability. Press ‘Enter Flag’ to add the flag you have found. You can view your progress in the progress
        bars which display how many of the vulnerabilities you have completed overall, as well as broken down by
        difficulty level.
    </string>
    <string name="instructions">instructions
    </string>
    <string name="hint1EPA">People sometimes use a name of someone they know or a significant date as their as their
        PIN.
    </string>
    <string name="hint2EPA">Dates can be formatted in several different ways eg.
        the 4th of March 2019 can be:
        04 03 2019,
        4.3.2019 or 4.3.19
    </string>
    <string name="hint3EPA">On some devices the number pad has letters on each key.
    </string>
    <string name="hint1MPA">When hiding codes in the phone book, people often name the contact in accordance with the
        company or site that it is used for
    </string>
    <string name="hint2MPA">When hiding codes as a contact, the name will sometimes be the code in a word form, however
        the contact can be left empty
    </string>
    <string name="tfamitigations">These tokens should be completely randomised and should not follow any distinguishable
        pattern. The use of a time-based randomisation methods or algorithms to calculate the next code makes it easy to
        predict what the next code will be, using the current time. Instead, a randomisation function should be used to
        create a unique token not based on any pattern or other value as to avoid repetition or the chances of this
        token falling into the wrong hands and being used by an attacker to access a user\'s account.
    </string>
    <string name="pamitigations">Due to the fact that the authentication of PINs and passwords can only be as strong as
        the user\'s PIN or password, this can be problematic if the user stores their PINs in obvious places or use
        words/phrases that are easily identifiable to the user. This can be prevented by using PINs that do not relate
        to the user in any way. Increasing the size of PINs also helps as there can be far more combinations for possible PINs that
        an attacker will have to try.
    </string>
    <string name="paeinstructions">However safe a log-in system is, if a user does not hide their PINs or
        creates their
        PINs from easily accessible information, the system can be easily bypassed.

        To gain the flag use the user\'s social media account to figure out their PIN
    </string>
    <string name="paminstructions">Due to the number of passwords and PINs people have to remember, ways of noting down
        PINs are
        often done such as including a contact in their phone to remind them of their PIN. Using the user phone book on
        this emulator search the contacts to find the hidden PIN code
    </string>
    <string name="sqliEInfo">You have been provided the email whale@whalemail.sea, use this login to gain as much
        information as possible. This level shows how user data is stored insecurely and poorly verified. This field
        does not implement a lockout policy alongside allowing account enumeration. Account enumeration allows a hacker
        to identify active accounts by brute force, allowing active accounts to be easily identified. Show you
        understand how to enumerate accounts!
    </string>
    <string name="sqliEHintOne">You have been given the email whale@whalemail.sea, try entering this on the login
        screen
    </string>
    <string name="sqliEHintTwo">This page is vulnerable to account enumeration, remember that means you can show what
        emails exist and which do not!
    </string>
    <string name="sqliEHintThree">Enter fish@whalemail.sea, note what happens to your success message.</string>
    <string name="sqliMInfo">You are a hacker who has been sniffing your victim’s network, viewing the codes they have
        been using to log in to their account. You must find the pattern in these codes and use this to predict what the
        next code will be. Once you have found this next code, you can use it to log in. Your findings from sniffing the
        network can be found in the first hint.
    </string>
    <string name="VulnSelectorInfo">Each vulnerability contains three challenges for you to complete. Instructions will
        appear once you select a difficulty level,
        hints will also be available to use throughout the challenges if you get stuck! Some of the information you need
        to complete may be located on the phone, you are not limited to the app itself.
        Good luck!
    </string>

    <string name="SQLiInfo">
        SQL Injection is a form of code injection, usually used by an attacker to target data driven applications. Users
        will enter SQL statements in order to query the data structures used.
        These queries could provide an attacker with
    </string>

    <string name="SQLiMitigations">
        SQL Injection can be prevented by using prepared statements. Prepared statements pass the query and the data to
        the database separately preventing malicious user entries to be executed.
        A developer may also wish to prevent SQL by thoroughly validating input, preventing users from entering common
        phrases used during the attacks such as SELECT. Although it is recommended this should be used alongside
        prepared statements.
    </string>
    <string name="TwoFAFurtherReading">
        Two Factor Authentication is used to provide another way of verifying a user\'s identity, using something they have such as a code or device as well as something they know, such as their password.
        If 2FA codes are generated in a way that is predictable or can be intercepted, hackers can use them to access a user\'s information. This can be protected by avoiding distributing codes through SMS or email,
        and using devices such as Universal Second Factor devices such as USB keys.
        \n\n <a href="https://www.kaspersky.co.uk/blog/2fa-practical-guide/14589/">\'Types of two-factor authentication, pros and cons\', Kaspersky Labs</a>\n
        \n <a href="https://www.tripwire.com/state-of-security/security-data-protection/cyber-security/u2f-next-generation-2-factor-authentication/">\'U2F: Next Generation 2-Factor Authentication\', Tripwire</a>\n
        \n <a href="https://www.wired.com/story/2fa-randomness/">\'Just how random are two factor authentication codes?\', Wired</a>
    </string>

    <string name="SQLiFurtherReading">
        SQL injection is a form of code injection in which the user can manipulate a program to output otherwise protected data.
        This can be protected against by using appropriate data sanitation and also ensuring by all means that data queries are handled separately from data input.
        \n <a href="https://www.owasp.org/index.php/SQL_Injection">\'SQL Injection\', OWASP</a>\n
        \n <a href="https://www.w3schools.com/sql/sql_injection.asp">\'SQL Injection\', W3Schools</a>\n
        \n <a href="https://www.w3schools.com/php/php_mysql_prepared_statements.asp">\'PHP Prepared Statements\', W3Schools</a>\n
        \n <a href="https://guides.codepath.com/websecurity/SQL-Injection">\'SQL Injection\', Codepath</a>\n
        \n <a href="https://developer.android.com/training/articles/security-tips">\'Security Tips\', Android Developers</a>\n

    </string>

    <string name="SQliMediumInfo">You have received a sample of a database that has been compromised. The development team have been known to use common data obfuscation methods!
        Your job is to decode the text in order to reveal a password, this password is your flag! \n Not that when using an emulator you must hold down your mouse, or trackpad, as if using a touchscreen
        and hit copy to copy text to your clipboard. This text can then be pasted outside of the emulator environment.
    </string>

    <string name="InsecureLoggingFurtherReading">
        Many vulnerabilities to do with Insecure Logging are due to app developers thinking that the only people able to see the logs of the application are themselves.
        This oversight on the part of development teams can sometimes result in sensitive or even just too much data being released in the form of android logs.\n
        These logs can be viewed very easily, even with little tech knowledge, by either downloading an application or by finding logdumps in locations on the device. With some understanding
        of the layout of android logs, these can be understood and read by any user, not just the development team.\n
        \n<a href="https://stackoverflow.com/questions/17290023/obfuscation-in-android-studio">\'Obfuscation in Android Studio\', Ilia Nedoluzhko, Stack Overflow</a>\n
        \n<a href="https://android.stackexchange.com/questions/14430/how-can-i-view-and-examine-the-android-log">\'How can I view and examine the Android log?\', Bryan Denny, Android Enthusiasts - Stack Exchange</a>
    </string>

    <string name="HardcodingFurtherReading">
        A Hardcoding Vulnerability is a fairly simple concept to explain; if the development team code vulnerable information into an application, they need to do it in such a way
        that, if someone was to download the application and unpack it, the person wouldn\'t see that information. Otherwise it would be a security flaw! \n
        In reality, development teams often forget or overlook these kinds of vulnerabilities due to them not thinking about anyone other than themselves looking at the code that makes their application up.\n
        \n<a href="https://hackernoon.com/how-i-hacked-modern-vending-machines-43f4ae8decec">\'How I hacked modern Vending Machines\', Matteo Pisani, Hackernoon</a>
    </string>

    <string name="PoorAuthFurtherReading">
        Due to the need to protect the sensitive data stored on devices, methods of authentication are needed but most methods can have vulnerabilities if not programmed correctly. By exploiting poor authentication methods, access to sensitive data can be gained.
        Although, due to human error, even the better authentication methods can become poor if an end user stores their passwords and PINs in easy to access places.\n
        \n<a href="https://blog.appknox.com/understanding-owasp-top-10-mobile-poor-authorization-and-authentication">\'Understanding OWASP Top 10 Mobile: Poor Authorization and Authentication\', AppKnox</a>\n
        \n<a href="https://www.howtogeek.com/195430/how-to-create-a-strong-password-and-remember-it/">\'How to Create a Strong Password (and Remember It)\', Chris Hoffman</a>
    </string>
    <string name="flagsButton">The \'Flags\' button on each vulnerability will direct you to the progress page, where
        you can enter any flags you have found in order to update your progress.\n The progress page can also be
        accessed
        by clicking \'View Progression\' and \'Update Progress\' buttons on the vulnerability and difficulty selector
        menus.
    </string>
    <string name="HardCoding_Error">
        //ERROR// - - //DIFF_SELECT_HARDCODE//
    </string>
    <string name="HardCoding_Desc_1">
        You\'ve been supplied with the code for an android application which connects to a database for use internally.
        To find the flag you must look through the code and follow it\'s operations to find any security flaws.
    </string>
    <string name="HardCoding_Desc_2">
        For this exercise, you\'ve been granted access to a small section of code from a malicious android application. To find the flag here, take a look at how the code interacts with the android operating system to further itself.
    </string>
    <string name="HardCoding_Desc_3">
        This final exercise will test knowledge worked on in the previous difficulties, you\'ve been given another code segment from a malicious android application. Complete it by looking at what the code is doing to gather information on the user.
    </string>
    <string name="HardCoding_Hint_Easy_1">
        The android method for connecting and using a database uses hardcoded variables to interact with. These variables may contain sensitive information.
    </string>
    <string name="HardCoding_Hint_Easy_2">
        Follow the flow of instructions when the application interacts with the database, values are hardcoded which contain the information you\'re looking for.
    </string>
    <string name="HardCoding_Hint_Easy_3">
        Look closely at the bottom section of the code. This section is where the flag is added to the database.
    </string>
    <string name="HardCoding_Hint_Medium_1">
        Android malware will sometimes focus on elevating it\'s privilege so that it can access more functions within the android platform. Look at how the malware does this.
    </string>
    <string name="HardCoding_Hint_Medium_2">
        Usually malware will use Command and Control (or C+C) servers to connect \'back home\'. Finding out how the malicious code actually achieves this will allow security analysts to investigate the attacker further, and help you find the flag!
    </string>
    <string name="HardCoding_Hint_Medium_3">
        The Class \'reportServiceState()\' is where the malware reports back to the server, the flag is located in these server connection details!
    </string>
    <string name="HardCoding_Hint_Killer_1">
        This malware focuses on collecting information from the victims device, again, by looking at how the malware interacts with the OS you will find the flag.
    </string>
    <string name="HardCoding_Hint_Killer_2">
        Just like the previous activity, this malware connects to a C+C server, albeit in a different manner, the information used to connect back could help find the flag.
    </string>
    <string name="HardCoding_Hint_Killer_3">
        The section where the malware encodes information using URLEncoder, contains details on the author of the malicious code, and also the flag!
    </string>
    <string name="InsecureLogs_Error">
        //ERROR// - - //DIFF_SELECT_LOGGING//
    </string>
    <string name="InsecureLogs_Desc_1">
        You\'ve been given access to a log file from a user\'s mobile phone. This information will allow you to investigate how the user interacted with their phone and apps.
    </string>
    <string name="InsecureLogs_Desc_2">
        In this example, you\'ve still been given a log file. However more measures have been put in place in the apps the user has interacted with to avoid data leakage.
    </string>
    <string name="InsecureLogs_Desc_3">
        Again, you\'ve been given access to a log file. This time the user interacts with some different applications which provides more information to what they were up to.
    </string>
    <string name="InsecureLogs_Hint_Easy_1">
        You\'ve been given access to the log files generated by a user, can you find anything interesting?
    </string>
    <string name="InsecureLogs_Hint_Easy_2">
        Look at the logs as a timeline of events, what is the user doing?
    </string>
    <string name="InsecureLogs_Hint_Easy_3">
        You\'re looking for an event where the program outputs a Username and a Password, this is the flag!
    </string>
    <string name="InsecureLogs_Hint_Medium_1">
        Look at what the program is outputting to the log file, something about a file path?
    </string>
    <string name="InsecureLogs_Hint_Medium_2">
        This exercise will require you to think outside the box, or outside the app?
    </string>
    <string name="InsecureLogs_Hint_Medium_3">
        If you use the filesystem browser app on the phone, you can find the file by navigating to the filepath!
    </string>
    <string name="InsecureLogs_Hint_Killer_1">
        Something unusual happens in this log file, can you identify it?
    </string>
    <string name="InsecureLogs_Hint_Killer_2">
        One of the apps crashes during running, this dumps a file called traces.txt
    </string>
    <string name="InsecureLogs_Hint_Killer_3">
        By using the filesystem browser, as in the previous exercise, you can navigate to this file and find the flag!
    </string>
    <string name="InsecureLogsMitigations">
        Insecure Log Vulnerabilities are mitigated by development teams when creating applications. This is done by ensuring that any excessive generation of logs, necessary for the
        debugging of the application, are removed before the release of the application to the public.\n
        Another way the development team could ensure that this vulnerability won\'t affect their project is by changing normal error and crash messages
        to ones made by them. This stops any information leakage by the default error catching system during operation.
    </string>
    <string name="HardcodingMitigations">
        Although a good idea, "Just don\'t put the password in the code" isn\'t the only fix for Hardcoding Vulnerabilities in an android application.\n
        Many problems are usually found with sensitive resources and functions that give away too much information about an application. The development team can properly mitigate
        Hardcoding Vulnerabilities by changing the layout, function names and variable names inside their application to obfuscate the code that makes it up.
        \n
        Another step to secure hardcode is to use build in development tools such as Minify and Proguard to ensure that if anyone was to unpack and decompile the apk file, much
        of the information would be obscured. This would make it much harder for someone to quickly glance over the code and find the important information.
    </string>
    <string name="pakinstructions">Due to the many ways applications can be coded, errors can occur which can lead to
        sensitive information being revealed, as a result of error handling being left in.
    </string>
    <string name="hint1KPA">Computers are logical machines, if they are not programmed to catch logical errors, they
        have a tendency to crash
    </string>
    <string name="SQLiKillerInfo">You have been provided with a vulnerable login form! The table name is Emails, and column names uid, emailAddress and password. Use what you have learned to dump the password for the user with ID = 1. \n
        Once the password has been displayed from the database, this is your flag!</string>
    <string name="hint2KPA">Think what number operations have certain requirements</string>
    <string name="hint3KPA">0 is a mysterious number. In case the app is programed correctly use this button to crash the app</string>
    <string name="disclaimer">This application is for educational purposes only</string>
</resources>
