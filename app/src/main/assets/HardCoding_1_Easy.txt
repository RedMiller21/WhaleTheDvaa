package BankingCo.MobileBanking;
import android.arch.persistence.room.Database;
import android.arch.persistence.room.RoomDatabase;
import android.arch.persistence.room.ColumnInfo;
import android.arch.persistence.room.Entity;
import android.arch.persistence.room.PrimaryKey;
import android.support.annotation.NonNull;

var db = Room.databaseBuilder(this, AppDatabase::class.java, "Email_Address").allowMainThreadQueries().fallbackToDestructiveMigration().build()
var emails = Emails.populateData()

for (email in emails)db.daoAccess().insertOnlySingleUser(email)

SQL_Login.setOnClickListener{

    var searchText = SQL_Email.text.toString()
    val emailCount = db.daoAccess().emailExists(searchText)

}

@Database(entities = {Emails.class}, version = 1)

public abstract

class AppDatabase extends RoomDatabase{

   public abstract DaoAccess daoAccess();

}

@Dao
public interface DaoAccess {

   @Insert
   void insertOnlySingleUser(Emails emails);

   @Query("SELECT * FROM Emails WHERE uid=:uid")

   Emails fetchOneEmailsByEmailsID(int uid);

   @Update
   void updateEmails(Emails emails);

   @Delete
   void deleteMovie(Emails emails);

   @Query("SELECT COUNT(*) FROM Emails WHERE emailAddress=:searchText")

   int emailExists(String searchText);
   public List<Emails.NameTuple> loadFullName;

}

@Entity
public class Emails {

   @NonNull

   @PrimaryKey(autoGenerate = true)

   private int uid;
   @ColumnInfo(name = "Email")

   private String emailAddress;
   @ColumnInfo(name = "Password")

   private String Password;

   private String AccountType;
   @ColumnInfo(name = "AccountType")

   public Emails(int uid, String Email, String Password){

       this.uid = uid;
       this.Email = Email;
       this.Password = Password;
       this.AccountType = AccountType;

   }

  public class NameTuple{

       @ColumnInfo(name =  "Email")

       public String Email;
       @ColumnInfo(name = "Password")

      public String Password;

      private String AccountType;
      @ColumnInfo(name = "AccountType")

  }

   @NonNull
   public int getUid() {
       return uid;
   }

   public void setUid(@NonNull int uid) {
       this.uid = uid;
   }

   public String getEmail() {
       return Email;
   }

   public void setEmail(String Email) {
       this.Email = Email;
   }

   public String getPassword() {
       return Password;
   }

    public void setPassword(String Password) {
       this.password = Password;
   }

   public String getAccountType() {
       return AccountType;
   }

    public void setAccountType(String AccountType) {
       this.AccountType = AccountType;
   }

   public static Emails[] populateData(){
       return new Emails[]{
               new Emails(1, "admin@whalemail.sea", "H3RM4N-M3LV1LL3", "Admin"),
               new Emails(2, "CPT_Ahab@whalemail.sea", "PequodDoesntSink123", "User"),
               new Emails(3, "CPT_Boomer@whalemail.sea", "SamEnderby001", "User"),
               new Emails(4, "Moby_D@whalemail.sea", "BlubbBlubb11", "User"),
               new Emails(5, "xx_Ishmael_xx@whalemail.sea", "Survivor9", "User"),
               new Emails(6, "Stubb1851@whalemail.sea", "2ndMate8", "User"),
               new Emails(7, "Queequeg@whalemail.sea", "Harpwner99", "User"),
               new Emails(8, "SStarbuckk@whalemail.sea", "ChiefMate8", "User"),
               new Emails(9, "Elijah@whalemail.sea", "SailingIs4Chumps01", "User"),
       };
   }

}